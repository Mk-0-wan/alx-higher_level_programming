#!/usr/bin/python3
"""A rectangle class that inherits from Base class"""
from models.base import Base


class Rectangle(Base):
    """docstring for Rectangle"""

    def __init__(self, width, height, x=0, y=0, id=None):
        """Initializes all the instance attributes
        Args:
            width (int): an integer value holding the with of the Rectangle
            height (int): height of the rectangle
            x (int): just an x value
            y (int): just a y int value
            id (int): id value
        """
        super().__init__(id)
        self.width = width
        self.height = height
        self.x = x
        self.y = y


    @property
    def width(self) -> int:
        """Simple width getter"""
        return self.__width

    @property
    def height(self) -> int:
        """Simple height getter"""
        return self.__height

    @property
    def x(self) -> int:
        """Simple x getter"""
        return self.__x

    @property
    def y(self) -> int:
        """Simple y getter"""
        return self.__y

    @width.setter
    def width(self, value):
        """Simple width setter
        Args:
            value (int): new value to assign to the instance attribute
        Return:
            returns a new mangled width for the instance variable
        """
        self.param_validator('width', value)
        self.__width = value
        return self.__width

    @height.setter
    def height(self, value):
        """Simple width setter
        Args:
            value (int): new value to assign to the instance attribute
        Return:
            returns a new mangled width for the instance variable
        """
        self.param_validator('height', value)
        self.__height = value
        return self.__height

    @x.setter
    def x(self, value):
        """Simple width setter
        Args:
            value (int): new value to assign to the instance attribute
        Return:
            returns a new mangled width for the instance variable
        """
        if not isinstance(value , int):
            raise TypeError("x must be an integer")
        if value < 0:
            raise ValueError("x must be >= 0")
        self.__x = value
        return self.__x

    @y.setter
    def y(self, value):
        """Simple width setter
        Args:
            value (int): new value to assign to the instance attribute
        Return:
            returns a new mangled width for the instance variable
        """
        if not isinstance(value , int):
            raise TypeError("y must be an integer")
        if value < 0:
            raise ValueError("y must be >= 0")
        self.__y = value
        return self.__y

    def area(self):
        """returns the area of a Rectangle"""
        return self.__width * self.__height

    def display(self) -> None:
        """Prints the the result in an ascii form"""
        if self.__width == 0 or self.__height == 0:
            print("")
        # for _ in range(self.__height):
            # print("#" * self.__width)
        # for task 7
        x_val = self.__x
        y_val = self.__y
        if x_val > 0:
            print("\n" * int(y_val - 1)) # to remove the zero index
        for _ in range(self.__height):
            print(" " * (x_val, y_val)[x_val == 0] + "#" * self.__width)

    def __str__(self):
        """How to print out the file it the specified order"""
        cls_name = type(self).__name__
        return f"[{cls_name}] ({self.id}) {self.__x}/{self.__y} - {self.__width}/{self.__height}"

    def update(self, *args):
        """Updates all the instances variables
        Args:
            args (tuple): a list of tuple that will be used to assign
            values for the instance variable
        """
        if args is not None:
            for indx, ag_r in enumerate(args):
                if indx == 0:
                    self.id = ag_r
                elif indx == 1:
                    self.width = ag_r
                elif indx == 2:
                    self.height = ag_r
                elif indx == 3:
                    self.x = ag_r
                elif indx == 4:
                    self.y = ag_r
